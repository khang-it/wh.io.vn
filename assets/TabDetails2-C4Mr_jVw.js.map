{"version":3,"mappings":"4OAIaA,EAAEC,EAAAC,EAAA,QACFC,EAAIF,EAAAC,EAAA,kBACJE,EAAWH,EAAAC,EAAA,kBAehB,MAAAG,MAAmB,IAAG,IAQZ,SAAAC,EAAkBC,EAAMC,EAAU,CAChDH,EAAa,IAAIE,EAAMC,CAAQ,CACjC,UAGgBC,EAAoBF,EAAM,CACxCF,EAAa,OAAOE,CAAI,CAC1B,UAGgBG,EAAyBH,EAAM,CAC7CF,EAAa,OAAOE,CAAI,EACxBI,EAAiB,OAAOJ,CAAI,CAC9B,CAGI,IAAAI,MAAuB,IACvBC,IAAmB,IAAI,EACvBC,IAAY,EAAK,EACjBC,IAAQ,IAAI,iBAOMC,EAAmBR,EAAM,CACzC,GAAAI,EAAiB,IAAIJ,CAAI,SACpBI,EAAiB,IAAIJ,CAAI,EAG5B,MAAAS,EAASX,EAAa,IAAIE,CAAI,EAC/B,IAAAS,EACO,8CAAoCT,CAAI,qBAI9CU,SADeD,EAAM,GACP,QACpB,OAAAL,EAAiB,IAAIJ,EAAMU,CAAI,EACxBA,CACT,gBAGeC,EAAcX,EAAM,IAC5BA,EACD,IAAAY,EAAAP,CAAgB,GAAID,EAAiB,IAAIJ,CAAI,EAAG,CAElDa,EAAAR,EAAmBD,EAAiB,IAAIJ,CAAI,SAE9C,CAEAa,EAAAP,EAAY,EAAI,EAChBO,EAAAN,EAAQ,IAAI,EACZM,EAAAR,EAAmB,IAAI,EAEnB,IACI,MAAAI,EAASX,EAAa,IAAIE,CAAI,YACzBS,GAAW,WACV,8CAAoCT,CAAI,eAIhD,GAAAI,EAAiB,IAAIJ,CAAI,EAC3Ba,EAAAR,EAAmBD,EAAiB,IAAIJ,CAAI,OACvC,CACC,MAAAc,QAAeL,EAAM,IAC3BJ,EAAmBS,EAAO,OAAO,EACjCV,EAAiB,IAAIJ,IAAMK,CAAgB,EAC7C,CACD,OAAQU,EAAG,CACVF,EAAAN,EAAQQ,CAAC,CACX,QAAU,CACRF,EAAAP,EAAY,EAAK,QACXU,EAAI,CACZ,EACF,UAgBgBC,EAAwBC,EAAM,CAEtC,MAAAjB,wBAA6BiB,CAAI,+BACvCpB,EAAa,IAAIoB,EAAK,YAAW,EAAIjB,CAAQ,CAC/C,gBAMsBkB,EAAoBD,EAAM,OACxCE,EAAMF,EAAK,YAAW,EAExB,GAAAd,EAAiB,IAAIgB,CAAG,SACnBhB,EAAiB,IAAIgB,CAAG,EAG7B,IAAAX,EAASX,EAAa,IAAIsB,CAAG,EAC5BX,IAEHA,wBAA2BS,CAAI,+BAC/BpB,EAAa,IAAIsB,EAAKX,CAAM,SAIxBC,SADeD,EAAM,GACP,QACpB,OAAAL,EAAiB,IAAIgB,EAAKV,CAAI,EACvBA,CACT,gBAGsBW,EAAkBC,EAAY,UAC5CC,EAAO,aACFL,KAAQI,EACb,UACIZ,EAAI,MAASS,EAAoBD,CAAI,EAC3CK,EAAQL,CAAI,EAAIR,CACjB,OAAQc,EAAK,CACZ,QAAQ,MAAuB,iBAAAN,CAAI,IAAKM,CAAG,CAC7C,QAEKD,CACT,CAGAE,EAAoB,gBACZJ,EAAiB,CAAE,aAAc,cAAc,GAEtD,wBAhKExB,EAAc6B,EAAa7B,MAAgBA,EAAW,uBA2ClDA,EAAW,GAChBc,EAAcd,EAAW","names":["id","$.prop","$$props","tabs","activeTabId","componentMap","registerComponent","type","loaderFn","unregisterComponent","unregisterComponentCache","loadedComponents","currentComponent","isLoading","error","loadComponentCache","loader","comp","loadComponent","$.get","$.set","module","e","tick","registerComponentByName","name","loadComponentByName","key","preloadComponents","names","results","err","onMount","mapTabDetail"],"ignoreList":[],"sources":["../../src/components/tabs/details/TabDetails2.svelte"],"sourcesContent":["<script>\n  import { tick, onMount } from 'svelte';\n  import { mapTabDetail } from '$lib/mapper.js';\n  // export let tab;\n  export let id;\n  export let tabs = [];\n  export let activeTabId;\n\n  $: activeTabId = mapTabDetail[activeTabId] || activeTabId;\n\n  // Dùng Map thay vì object để tiện mở rộng động\n  /**\n  // Thêm component động\n  registerComponent('invoice', () => import('./InvoiceDetail.svelte'));\n\n  // Load (có cache)\n  const InvoiceComp = await loadComponent('invoice');\n\n  // Xoá component và cache\n  unregisterComponent('invoice');\n */\n  const componentMap = new Map([\n    // ['user', () => import('./UserDetail.svelte')],\n    // ['report', () => import('./ReportView.svelte')],\n    // ['product', () => import('./ProductDetail.svelte')],\n    // ['result', () => import('./ResultDetail.svelte')]\n  ]);\n\n  // Hàm đăng ký động\n  export function registerComponent(type, loaderFn) {\n    componentMap.set(type, loaderFn);\n  }\n\n  // Hàm xoá component khỏi map (nếu cần)\n  export function unregisterComponent(type) {\n    componentMap.delete(type);\n  }\n\n  // Huỷ đăng ký component + clear cache\n  export function unregisterComponentCache(type) {\n    componentMap.delete(type);\n    loadedComponents.delete(type);\n  }\n\n  // Cache component đã load\n  let loadedComponents = new Map();\n  let currentComponent = null;\n  let isLoading = false;\n  let error = null;\n\n  // Reactive: chỉ load khi activeTabId thay đổi\n  $: if (activeTabId) {\n    loadComponent(activeTabId);\n  }\n\n  export async function loadComponentCache(type) {\n    if (loadedComponents.has(type)) {\n      return loadedComponents.get(type);\n    }\n\n    const loader = componentMap.get(type);\n    if (!loader) {\n      throw new Error(`Component loader for type \"${type}\" not found`);\n    }\n\n    const module = await loader();\n    const comp = module.default;\n    loadedComponents.set(type, comp);\n    return comp;\n  }\n\n  // Hàm load component theo type\n  async function loadComponent(type) {\n    if (!type) return;\n    if (currentComponent && loadedComponents.has(type)) {\n      // Đã load rồi thì gán luôn\n      currentComponent = loadedComponents.get(type);\n      return;\n    }\n\n    isLoading = true;\n    error = null;\n    currentComponent = null;\n\n    try {\n      const loader = componentMap.get(type);\n      if (typeof loader !== 'function') {\n        throw new Error(`Component loader for type \"${type}\" not found`);\n      }\n\n      // Nếu cache có thì lấy luôn\n      if (loadedComponents.has(type)) {\n        currentComponent = loadedComponents.get(type);\n      } else {\n        const module = await loader();\n        currentComponent = module.default;\n        loadedComponents.set(type, currentComponent);\n      }\n    } catch (e) {\n      error = e;\n    } finally {\n      isLoading = false;\n      await tick();\n    }\n  }\n\n  // Cache loader động\n  // const componentMap = new Map();\n  // const loadedComponents = new Map();\n\n  /**\n   * Đăng ký component theo tên string (vd: \"InvoiceDetail\")\n   * @param {string} name\n   * // Gọi trực tiếp\n    const Comp = await loadComponentByName('InvoiceDetail');\n\n    // Hoặc đăng ký trước rồi dùng\n    registerComponentByName('InvoiceDetail');\n    const Comp2 = await loadComponentByName('InvoiceDetail');\n   */\n  export function registerComponentByName(name) {\n    // Tạo loader function động\n    const loaderFn = () => import(`./${name}.svelte`);\n    componentMap.set(name.toLowerCase(), loaderFn);\n  }\n\n  /**\n   * Load component theo tên (vd: \"InvoiceDetail\" hoặc \"invoiceDetail\")\n   * @param {string} name\n   */\n  export async function loadComponentByName(name) {\n    const key = name.toLowerCase();\n\n    if (loadedComponents.has(key)) {\n      return loadedComponents.get(key);\n    }\n\n    let loader = componentMap.get(key);\n    if (!loader) {\n      // Nếu chưa đăng ký thì tự tạo loader theo tên file\n      loader = () => import(`./${name}.svelte`);\n      componentMap.set(key, loader);\n    }\n\n    const module = await loader();\n    const comp = module.default;\n    loadedComponents.set(key, comp);\n    return comp;\n  }\n\n  // preload nhiều component theo danh sách string\n  export async function preloadComponents(names = []) {\n    const results = {};\n    for (const name of names) {\n      try {\n        const comp = await loadComponentByName(name);\n        results[name] = comp;\n      } catch (err) {\n        console.error(`❌ Lỗi preload ${name}:`, err);\n      }\n    }\n    return results;\n  }\n\n  // preload trước khi app chạy\n  onMount(async () => {\n    await preloadComponents(['HomeDetail', 'ResultDetail']);\n    //console.log('✅ Preloaded HomeDetail and ResultDetail', loadedComponents);\n  });\n</script>\n\n<slot {currentComponent} {tabs} {activeTabId} {isLoading} {error} {id} />\n"],"file":"assets/TabDetails2-C4Mr_jVw.js"}